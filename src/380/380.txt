UVA 380
Call forwarding

Process
My solution for this problem strikes me as very ugly. I'm sure there's a cleaner
faster way to do it. I chose to store the information about each extension in a
vector of vector<int> in order to handle repeated source extensions. Since we're
given nice conditions (no overlap, no out of bounds), the problem is solvable
using a simple traverse method that checks for cycles and outputs the final
extension in the chain that does not forward to another.

Input
3
1111 0100 0200 2222
1111 0301 0500 4444
2222 0200 0200 3333
3333 0250 1000 1111
7777 1000 2000 7777
0000
0050 1111
0150 1111
0200 1111
0225 2222
0270 1111
0320 1111
0320 3333
0900 3000
1250 3333
1250 7777
9000
0000
3000 1111
9000
0060 0000 0300 1000
1000 0060 0200 1500
1500 0030 0090 8000
2000 3000 1000 3000
3000 3000 1000 2000
0000
0030 0060
0060 0060
0000 2000
3500 2000
9000

Output
CALL FORWARDING OUTPUT
SYSTEM 1
AT 0050 CALL TO 1111 RINGS 1111
AT 0150 CALL TO 1111 RINGS 2222
AT 0200 CALL TO 1111 RINGS 3333
AT 0225 CALL TO 2222 RINGS 3333
AT 0270 CALL TO 1111 RINGS 9999
AT 0320 CALL TO 1111 RINGS 4444
AT 0320 CALL TO 3333 RINGS 4444
AT 0900 CALL TO 3000 RINGS 3000
AT 1250 CALL TO 3333 RINGS 1111
AT 1250 CALL TO 7777 RINGS 9999
SYSTEM 2
AT 3000 CALL TO 1111 RINGS 1111
SYSTEM 3
AT 0030 CALL TO 0060 RINGS 1000
AT 0060 CALL TO 0060 RINGS 8000
AT 0000 CALL TO 2000 RINGS 2000
AT 3500 CALL TO 2000 RINGS 9999
END OF OUTPUT

UVA 487
Boggle blitz

Process
This problem can be solved using recursive backtracing. Start a search from
each space on the board and expand on all adjacent spaces with the condition
that the next letter is farther down on the alphabet from the current one. Pass
on the building word in the method and store it if its length is greater than
3. I thought the tricky part of this problem was dealing with duplicates and
printing in sorted order. My original thought was to use a vector, but I
decided against bothering with checking for unique values. Note that you can do
this using the 'unique' function in the algorithm library. I chose instead a
kind of hacky solution of an array of sets. I inserted the words into the set
at the array index of the word length. That way I didn't have to bother with a
custom sorting method or removing duplicates. I just iterated through the sets
and printed all found combinations greater than or equal to word length 3 and
stopped when the set size was 0.

Input
4

3
one
top
dog

4
abcd
bcda
cdab
dabc

4
zzzz
zzaz
zzzz
zzzz

3
edc
fab
ghi

Output
dop
dot
eno
enp
ent
eop
eot
gop
got
nop
not
enop
enot

abc
abd
acd
bcd
abcd


abc
abd
abh
abi
acd
ade
adf
aef
afg
afh
agh
ahi
bcd
bde
bdf
bhi
cde
cdf
def
dfg
dfh
efg
efh
fgh
fhi
ghi
abcd
abde
abdf
abhi
acde
acdf
adef
adfg
adfh
aefg
aefh
afgh
afhi
aghi
bcde
bcdf
bdef
bdfg
bdfh
cdef
cdfg
cdfh
defg
defh
dfgh
dfhi
efgh
efhi
fghi
abcde
abcdf
abdef
abdfg
abdfh
acdef
acdfg
acdfh
adefg
adefh
adfgh
adfhi
aefgh
aefhi
afghi
bcdef
bcdfg
bcdfh
bdefg
bdefh
bdfgh
bdfhi
cdefg
cdefh
cdfgh
cdfhi
defgh
defhi
dfghi
efghi
abcdef
abcdfg
abcdfh
abdefg
abdefh
abdfgh
abdfhi
acdefg
acdefh
acdfgh
acdfhi
adefgh
adefhi
adfghi
aefghi
bcdefg
bcdefh
bcdfgh
bcdfhi
bdefgh
bdefhi
bdfghi
cdefgh
cdefhi
cdfghi
defghi
abcdefg
abcdefh
abcdfgh
abcdfhi
abdefgh
abdefhi
abdfghi
acdefgh
acdefhi
acdfghi
adefghi
bcdefgh
bcdefhi
bcdfghi
bdefghi
cdefghi
abcdefgh
abcdefhi
abcdfghi
abdefghi
acdefghi
bcdefghi
abcdefghi

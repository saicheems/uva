UVA 331
Mapping the swaps

Process
This problem can be solved using recursive backtracing. Basically it's asking
for the number of different ways you can bubble sort an array with the minimum
number of swaps. It's worth noting that the maximum number of swaps possible
mathematically is n choose 2, or n * (n - 1) / 2. I stored a maxm value
representing the lowest number of swaps a valid sort took, and incremented the
total if the number of swaps was equal to this value. I reset the total to 0 if
a valid sort was found where the number of swaps was less than maxm. Just make
recursive calls after swapping adjacent elements from 1 to n - 1, and make sure
you swap back the elements before the next recursive call. However I'm not
completely satisfied with the elegance of my solution...I'll have to revisit it
another time.

Input
2 9 7
2 12 50
3 3 2 1
3 9 1 5
5 6 5 4 3 2
0

Output
There are 1 swap maps for input data set 1.
There are 0 swap maps for input data set 2.
There are 2 swap maps for input data set 3.
There are 1 swap maps for input data set 4.
There are 768 swap maps for input data set 5.
